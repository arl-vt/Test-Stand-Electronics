////*****************************************************************************
//// ADCF connect with interrupt
//
//
//#include <stdbool.h>
//#include <stdint.h>
//#include "inc/hw_memmap.h"
//#include "inc/hw_types.h"
//#include "inc/tm4c123gh6pm.h"
//#include "driverlib/debug.h"
//#include "driverlib/adc.h"
//#include "driverlib/gpio.h"
//#include "driverlib/pin_map.h"
//#include "driverlib/sysctl.h"
//#include "driverlib/uart.h"
//#include "utils/uartstdio.h"
//#include "driverlib/timer.h"
//#include "driverlib/interrupt.h"
//
////*****************************************************************************
//
////! This example shows how to setup ADC0 to read the internal temperature
////! sensor.
////! - UART0 peripheral
////! - GPIO Port A peripheral (for UART0 pins)
////! - UART0RX - PA0
////! - UART0TX - PA1
////!
//
////**********Function Prototype***********
//void initConsole(void);
//void initTempSensor(void);
//
////**********Constants*********************
//const int sampleFreq = 8000;
//
////**********Variables*********************
//uint32_t ADC0Value;
//uint16_t samplePeriod;
//
//void main(){
//    float vol;
//    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|
//                           SYSCTL_OSC_MAIN);  // Setup system clock at 40MHz from PLL with Crystal
//
//    initConsole();
//
//    initTempSensor();
//
//    IntMasterEnable();
//
//
//    while(1){
//        vol = ADC0Value*.000805664;
//        UARTprintf("Temp Sensor reading is: %04u, vol is: %.02f\n", ADC0Value, vol);
//        SysCtlDelay( (SysCtlClockGet()/(3*1000))*5 ) ;
//    }
//}
//
//void initConsole(){
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
//        SysCtlDelay(3); //Just to be sure that the peripherals were enabled
//
//        SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
//        SysCtlDelay(3); //Just to be sure that the peripherals were enabled
//
//        //Configure Pins for UART functionality
//        GPIOPinConfigure(GPIO_PA0_U0RX);
//        GPIOPinConfigure(GPIO_PA1_U0TX);
//        GPIOPinTypeUART(GPIO_PORTA_BASE,GPIO_PIN_0|GPIO_PIN_1);
//
//        // Configure UART clock and Baud rate
//        UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC); //Precision internal clock
//        UARTStdioConfig(0, 115200, 16000000); // UART Module 0, Baud Rate 115200 and System clock 16MHZ
//
//        UARTprintf("\n System Startup!\n");
//}
//
//
//void initTempSensor(){
//    //Enable Peripherals
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
//    SysCtlDelay(2);
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
//    SysCtlDelay(2);
//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
//    SysCtlDelay(2);
//
//    // Configure PE3 as ADC input
//    GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_3);
//
//    //ADC0
//    ADCHardwareOversampleConfigure(ADC0_BASE, 4); //Average 4 readings
//    ADCReferenceSet(ADC0_BASE, ADC_REF_INT);
//    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0); //Base, Seq Num, Trigger source, Priority
//    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END); // Base, Seq Num, Step, Config
//
//    //Config: produce interrupt when step is complete
//    ADCSequenceEnable(ADC0_BASE, 3); // Enable sequencer 3
//
//    // Interrupt enable
//    ADCIntClear(ADC0_BASE, 3);
//    IntEnable(INT_ADC0SS3);
//    ADCIntEnable(ADC0_BASE, 3);
//
//
//
//    //Timer0
//    // It acts as the trigger source
//    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);
//    samplePeriod = SysCtlClockGet()/sampleFreq;
//    TimerLoadSet(TIMER0_BASE, TIMER_A, samplePeriod-1);
//    TimerControlTrigger(TIMER0_BASE, TIMER_A, true);
//
//}
//
////Interrupts
//void timer0IntHandler(void){
//    TimerIntClear(ADC0_BASE, 3);
//}
//
//void ADC0SS3IntHandler(void){
//    ADCIntClear(ADC0_BASE, 3);
//   // while(!ADCIntStauts(ADC0_BASE, 3, false)){}
//    ADCSequenceDataGet(ADC0_BASE, 3, ADC0Value);
//}
