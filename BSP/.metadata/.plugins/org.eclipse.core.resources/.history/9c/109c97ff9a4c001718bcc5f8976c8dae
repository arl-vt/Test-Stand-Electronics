// slug.c
// Runs on TM4C123 with Tiva shield version 2.0
// The Board Support package is an abstraction layer forming a bridge between the low level and the high level software.
// This file contains function prototypes for the software interface to the Tiva Shield

// Shriya Shah
// May 18, 2017

//  J1   J3               J4   J2
// [ 1] [21]             [40] [20]
// [ 2] [22]             [39] [19]
// [ 3] [23]             [38] [18]
// [ 4] [24]             [37] [17]
// [ 5] [25]             [36] [16]
// [ 6] [26]             [35] [15]
// [ 7] [27]             [34] [14]
// [ 8] [28]             [33] [13]
// [ 9] [29]             [32] [12]
// [10] [30]             [31] [11]


// Connected pins and Peripherals
// power and reset
// J1.1 +3.3V (power)
// J3.21 +5V (power)
// J3.22 GND (ground)
// J2.20 GND (ground)
// J2.16 nothing (reset)
//--------------------------------------------------
// Motors
// PB7 - Direction
// PF1 - PWM
//--------------------------------------------------
// Load Cells
//--------------------------------------------------
// Thermocouple
//--------------------------------------------------
// Current Sensor
//--------------------------------------------------
// Absolute Encoders
//--------------------------------------------------
// Display LEDS
// PF1, PF2, PF3
//--------------------------------------------------
// Button
// PF0
//--------------------------------------------------
// unconnected pins

#include "slug.h"

#include <stdint.h>
#include <stdbool.h>

#include "utils/uartstdio.h"

#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/tm4c123gh6pm.h"
#include "inc/hw_gpio.h"
#include "inc/hw_ints.h"

#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/pin_map.h"
#include "driverlib/pwm.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"
#include "driverlib/uart.h"
#include "driverlib/adc.h"
#include "driverlib/debug.h"

// ****** Constants ******
const int sampleFreq = 8000; // Sample Frequency

// ****** Variables ******
uint32_t rawTemp[1];
uint16_t samplePeriod;

// ----------------ledTimer_Toggle-----------------------
// Toggle Red LED on PF1 based on Timer interrupt
void RedledTimer_Toggle();

//------------------Clock_set_fastest---------------------------
//Configure system clock to run at fastest settings
// 16MHZ crystal on main oscillator which drives the PLL (400 MHZ).
// There is a default /2 divider in clock path and we specify /5
// Final Clock frequency: 400/10 = 40 MHZ
//Input: none
//Output: None
void Clock_set_fastest(void){
    SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|
                        SYSCTL_OSC_MAIN);  // Setup system clock at 40MHz from PLL with Crystal
}

//------------------Clock_get_frequency---------------------------
//Get Current clock frequency
//Input: none
//Output: Frequency
uint32_t Clock_get_frequency(void){
    return SysCtlClockGet();
}

//------------------EnableInterrupts()---------------------------
//Enable all interuupts system wide
//Input: none
//Output: None
void EnableInterrupts(void){
    IntMasterEnable();
}

// ---------------Button1_Init----------------------
//Initializes the GPIO pin for the button PF0 (J2.17) as input.
//Input: none
//Output: none
uint8_t Button1_Init(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)){
       } //Enable Peripheral

    GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
    GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
}

//----------------Button1_Input---------------------
// Read and return the immediate status of the button1.
// Button debouncing not considered
// Input: none
// Output: Button not pressed - non zero
//         Button pressed - zero
// Call Button1_init() first
uint8_t Button1_Input(void){
    if(((GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4))&GPIO_PIN_4) == 0) //Button Pressed
        return 0;
    else
        return 1;
}

// ----------------RGBled_Init-----------------------
// Initializes the RGB LED on PF1, PF2 and PF3
void RGBled_Init(uint8_t red, uint8_t green, uint8_t blue){

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF)){
       } // Enable and wait for the port to be ready for access

    //Configure port for LED operation
    if(red>0){
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
    }if(blue>0){
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
    }if(green>0){
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
    }
}

// ----------------RGBled_Set-----------------------
// Sets the RGB LED on PF1, PF2 and PF3
// Input: non zero input sets the LEDs
// Output: none
void RGBled_Set(uint8_t red, uint8_t green, uint8_t blue){
    if(red>0){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, ~GPIO_PIN_1);
    }
    if(blue>0){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, ~GPIO_PIN_2);
    }
    if(green>0){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, ~GPIO_PIN_3);
    }
}

// ----------------RGBled_Toggle-----------------------
// Toggles the RGB LED on PF1, PF2 and PF3
// Input: non zero input toggles the LEDs
//         red is toggle for red
//         blue is toggle for blue
//         green is toggle for green
// Output: none
void RGBled_Toggle(uint8_t red, uint8_t green, uint8_t blue){
    if(red){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1)^GPIO_PIN_1);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, ~GPIO_PIN_1);
    }
    if(green){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_3)^GPIO_PIN_3);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, ~GPIO_PIN_3);
    }
    if(blue){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2)^GPIO_PIN_2);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, ~GPIO_PIN_2);
    }
}

// ----------------RedledTimer_Init-----------------------
// Initializes the Red LED on PF1
void RedledTimer_Init(int period){
    uint32_t periods; // Timer delays

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);

    //Configure Timer
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);

    // Define period
    periods = (SysCtlClockGet()/period)/2; //We want 10 Hz toggle frequency therefore the period should be the
    //system clock / desired toggle freq/2
    TimerLoadSet(TIMER0_BASE, TIMER_A, periods-1);

    //Enable iNTERRUPTS
    IntEnable(INT_TIMER0A);
    TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
    IntMasterEnable();

    //Enable Timer
    TimerEnable(TIMER0_BASE, TIMER_A);
}
// ----------------ledTimer_Toggle-----------------------
// Toggle Red LED on PF1 based on Timer interrupt
void RedledTimer_Toggle(){
    //Read current state and write back the opposite state
    if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1)){
        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, ~GPIO_PIN_1);
    }else{
        GPIOPinWrite(GPIO_PORTF_BASE,GPIO_PIN_1, GPIO_PIN_1);
    }
}

// ----------------Timer0IntHandler-----------------------
// ISR for Blink LED
void Timer0IntHandler_LED(void){
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);

    RedledTimer_Toggle();
}

void Timer1IntHandler(void){
    TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);

    RedledTimer_Toggle();
}
//------------------Delay_cycle----------------------------
//Delays the execution by approximately the given number of cycles
// It is not accurate
//Input: delay cycles
void Delay_cycle(uint32_t delay){
    SysCtlDelay(delay);
}

void delayMS(int ms) {
    SysCtlDelay( (SysCtlClockGet()/(3*1000))*ms ) ;
}



//------------------Motor_Init()---------------------------
//Initialize the Motor
//Input: None
//Output: None
void enableDirectionPin(){
       SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
       while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB)){}

       GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, MotorDirectionPin);
}

void enablePWMPin(int period){
        /* PWM clock: systemClock/2 = 20 MHZ */
       SysCtlPWMClockSet(SYSCTL_PWMDIV_2);

        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
        SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1); // Module 1 for PF1

        GPIOPinConfigure(GPIO_PF1_M1PWM5);
        GPIOPinTypePWM(GPIO_PORTF_BASE,MotorPWMPin);
        PWMGenConfigure(PWM1_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);
        PWMGenPeriodSet(PWM1_BASE, PWM_GEN_2, period);

        // Enable the PWM generator
        PWMGenEnable(PWM1_BASE, PWM_GEN_2);

        // Turn on the Output pins
        PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);
}

void setDirection(){
    GPIOPinWrite(GPIO_PORTB_BASE, MotorDirectionPin, MotorDirectionPin);
}

void clearDirection(){
    GPIOPinWrite(GPIO_PORTB_BASE, MotorDirectionPin, ~MotorDirectionPin);
}

void enableMotor(){
    setDirection();

    // Turn off the Output pins
     PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, true);
}

void disableMotor(){
    clearDirection();

    // Turn off the Output pins
     PWMOutputState(PWM1_BASE, PWM_OUT_5_BIT, false);
}

void Motor_Init(uint32_t period){

    //uint32_t period = SysCtlPWMClockGet()/frequency;

    /*Enable Peripheral Direction pin*/
       enableDirectionPin();

    /* Enable PWM*/
       enablePWMPin(period);

  // return period;
}


//------------------Motor_SetDuty()---------------------------
//Set Duty cycle for the motor
//Input: Target Duty Cycle
//Output: None
void Motor_SetDuty(float duty, uint32_t period){
    uint16_t dutyCycle;
    dutyCycle = duty*period;
    PWMPulseWidthSet(PWM1_BASE, PWM_OUT_5, dutyCycle);
}

//------------------SerialMonitor_Init()---------------------------
//Initialize the serial monitor using UART
//Input: None
//Output: None
void SerialMonitor_Init(){

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlDelay(3); //Just to be sure that the peripherals were enabled

    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlDelay(3); //Just to be sure that the peripherals were enabled

    //Configure Pins for UART functionality
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE,GPIO_PIN_0|GPIO_PIN_1);

    // Set UART functionality - Baud rate, parity etc
    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200, (UART_CONFIG_WLEN_8|UART_CONFIG_STOP_ONE|UART_CONFIG_PAR_NONE));

    //Enable Interrupts
    IntMasterEnable();
    IntEnable(INT_UART0);
    UARTIntEnable(UART0_BASE, UART_INT_RX|UART_INT_RT); //Enable RX and RT interrupt sources only

    // Initial UART message
       UARTCharPut(UART0_BASE, 'S');
       UARTCharPut(UART0_BASE, 't');
       UARTCharPut(UART0_BASE, 'a');
       UARTCharPut(UART0_BASE, 'r');
       UARTCharPut(UART0_BASE, 't');
       UARTCharPut(UART0_BASE, 'u');
       UARTCharPut(UART0_BASE, 'p');
       UARTCharPut(UART0_BASE, '!');
       UARTCharPut(UART0_BASE, ' ');
}

//------------------SerialMonitor_Confugure()---------------------------
//Initialize the serial monitor using UART, uses the Utilities library as well
// Much easier to work with
//Input: None
//Output: None
void SerialMonitor_Configure(){

    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlDelay(3); //Just to be sure that the peripherals were enabled

    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlDelay(3); //Just to be sure that the peripherals were enabled

    //Configure Pins for UART functionality
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE,GPIO_PIN_0|GPIO_PIN_1);

    // Configure UART clock and Baud rate
    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC); //Precision internal clock
    UARTStdioConfig(0, 115200, 16000000); // UART Module 0, Baud Rate 115200 and System clock 16MHZ

    UARTprintf("\n System Startup!\n");
}

//------------------SerialMonitor_Send()---------------------------
//Send Data to the serial monitor using UART
//Input: None
//Output: None
void SerialMonitor_Send(char* input){
    UARTprintf(input);
}

//------------------SerialMonitor_Receive()---------------------------
//Receive data from the serial monitor using UART
//Input: None
//Output: None
void SerialMonitor_Receive();

//------------------SerialMonitor_Loop()---------------------------
//Receive data from the serial monitor using UART and
// loop it back
//Input: None
//Output: None
void SerialMonitor_Loop(){
    if(UARTCharsAvail(UART0_BASE))
        UARTCharPut(UART0_BASE, UARTCharGet(UART0_BASE));
}

//------------------UARTIntHandler()---------------------------
//ISR for UART
//Input: None
//Output: None
void UARTIntHandler(void){
    uint32_t status;
    status = UARTIntStatus(UART0_BASE, true); //get the interrupt status
    UARTIntClear(UART0_BASE, status); //clear the interrupts
    while(UARTCharsAvail(UART0_BASE)){
        UARTCharPutNonBlocking(UART0_BASE, UARTCharGetNonBlocking(UART0_BASE)); //Echo Character
    }
}



//------------------tempSensor_init()---------------------------
//Initialize the Temperature Sensor on Board
//Input: None
//Output: None
void tempSensor_init(){
    // Enable ADC0
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    SysCtlDelay(2);

    //Hardware Averaging
    ADCHardwareOversampleConfigure(ADC0_BASE, 16); //average n samples (can be 2,4,8,16,32 or 64)

    // Configure Sequencer, sample sequencer 1, processor triggered - 1 MSPS, highest priority
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_PROCESSOR, 0);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ADC_CTL_TS); // ADC_CTL_TS is the temp sensor
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ADC_CTL_TS);
    ADCSequenceStepConfigure(ADC0_BASE, 1, 2, ADC_CTL_TS);
    // Configure interrupt flag to be set on last sample and notify that this is last sequence
    ADCSequenceStepConfigure(ADC0_BASE, 1, 3, ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);

    //Enable ADC sequencer 1
    ADCSequenceEnable(ADC0_BASE, 1);
}

//------------------tempSensor_read()---------------------------
//Read the Temperature Sensor on Board
//Input: None
//Output: ADC Value
uint32_t tempSensor_read(){
    uint32_t TempSensorValue[4];
    volatile uint32_t TempAvg;
    volatile uint32_t TempValueC;
    volatile uint32_t TempValueF;

    ADCIntClear(ADC0_BASE, 1);
    ADCProcessorTrigger(ADC0_BASE, 1);

    while(!ADCIntStatus(ADC0_BASE, 1, false)){
    }

    ADCSequenceDataGet(ADC0_BASE, 1, TempSensorValue);
    TempAvg = (TempSensorValue[0] + TempSensorValue[1] + TempSensorValue[2] + TempSensorValue[3] + 2)/4;
    return TempAvg;
}

//------------------ADC_init()---------------------------
//Initialize the Temperature Sensor on Board
//Input: None
//Output: None
void ADC_init(){
    // Enable ADC0, Timer 0
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
    SysCtlDelay(2);

    // ADC0 setup
    //Hardware Averaging
    ADCHardwareOversampleConfigure(ADC0_BASE, 4); //average n samples (can be 2,4,8,16,32 or 64)
    ADCReferenceSet(ADC0_BASE,ADC_REF_INT);
    // Configure Sequencer, sample sequencer 1, timer triggered - 1 MSPS, highest priority
    ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_TIMER, 0);
    // Configure interrupt flag to be set on last sample and notify that this is last sequence
    ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_TS|ADC_CTL_IE|ADC_CTL_END);
    ADCSequenceEnable(ADC0_BASE, 3);

    //Timer0 configure
    TimerConfigure(TIMER0_BASE,TIMER_CFG_PERIODIC);
    samplePeriod = SysCtlClockGet()/sampleFreq;
    TimerLoadSet(TIMER0_BASE,TIMER_A,samplePeriod - 1);
    TimerControlTrigger(TIMER0_BASE,TIMER_A,true);

    //Enable ADC sequencer 1
    IntEnable(INT_TIMER0A);
    TimerIntEnable(TIMER0_BASE,TIMER_TIMA_TIMEOUT);
    IntEnable(INT_ADC0SS3);
    ADCIntEnable(ADC0_BASE, 3);
    IntMasterEnable();
    TimerEnable(TIMER0_BASE,TIMER_A);
}

//------------------tempSensor_startConversion()---------------------------
//Start the sequencer for Temp Sensor
//Input: None
//Output: None
void tempSensor_startConversion(void){
    ADCProcessorTrigger(ADC0_BASE, 3);
}


//------------------tempSensor_handler()---------------------------
//Interrupt handler for Temp Sensor
//Input: None
//Output: None
void tempSensor_handler(void){
    ADCIntClear(ADC0_BASE, 3);
    ADCSequenceDataGet(ADC0_BASE, 3, rawTemp);
    //UARTprintf("%04u \n", rawTemp);
}

void Timer0IntHandler(void){
    TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
}


//------------------getAvgTemp()---------------------------
//Get Average Temperature
//Input: None
//Output: Average Temp
uint32_t getAvgTemp(){
    return rawTemp;
}

//------------------convert2C()---------------------------
//Convert Average Temperature to degree Celsius
//Input: None
//Output: None
uint32_t convert2C(uint32_t TempAvg){
    uint32_t TempValueC;
    TempValueC = (1475 - ((2475*TempAvg))/4096)/10;
    return TempValueC;
}

//------------------convert2F()---------------------------
//Convert Average Temperature to degree Farenhiet
//Input: None
//Output: None
uint32_t convert2F(uint32_t TempAvg){
    uint32_t TempValueF, TempValueC;
    TempValueC = (1475 - ((2475*TempAvg))/4096)/10;
    TempValueF = ((TempValueC*9)+160)/5;
    return TempValueF;
}
